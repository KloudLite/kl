package cmd

import (
	"errors"
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"strings"
	"time"

	"github.com/kloudlite/kl/lib/common"
	"github.com/spf13/cobra"
)


func code(str string, lang string) string {
	return fmt.Sprintf("```%s\n%s```", lang, str)
}

func getOptions(cmd *cobra.Command) string {
	if cmd.Flags().FlagUsages() != "" {
		return fmt.Sprintf(`### Options

%s`, code(cmd.Flags().FlagUsages(), "bash"))
	}
	return ""
}

func getSynopsis(cmd *cobra.Command) string {
	if cmd.Long != "" {
		return fmt.Sprintf(`### Synopsis

%s`, code(cmd.Long, ""))
	}
	return ""
}

func commandsList(cmd *cobra.Command) string {
	if len(cmd.Commands()) == 0 {
		return ""
	}

	result := "### SEE ALSO\n"

	for _, c := range cmd.Commands() {
		result = fmt.Sprintf("%s\n* [%s](%s)  - %s",
			result, c.CommandPath(),
			strings.ReplaceAll(c.CommandPath(), " ", "_"),
			c.Short)
	}

	return result
}

func generateDocs(cmd *cobra.Command, dir string) error {

	fileContent := fmt.Sprintf(`## %s

%s

%s

%s

%s

###### Auto generated by kl on %s
`, cmd.Name(), cmd.Short, getSynopsis(cmd), getOptions(cmd), commandsList(cmd),
		fmt.Sprintf("%d-%s-%d", time.Now().Day(), time.Now().Month(), time.Now().Year()))

	// fmt.Println(fileContent)
	if err := ioutil.WriteFile(path.Join(dir, strings.ReplaceAll(cmd.CommandPath(), " ", "_")+".md"), []byte(fileContent), 0644); err != nil {
		return err
	}

	for _, c := range cmd.Commands() {
		generateDocs(c, dir)
	}

	return nil
}


func runDocGen(cmd *cobra.Command, _ []string) {

	if _, er := os.Stat("./docs"); errors.Is(er, os.ErrNotExist) {
		err := os.MkdirAll("./docs", 0644)
		if err != nil {
			common.PrintError(err)
			return
		}

	} else {
		err := os.RemoveAll("./docs")

		if err != nil {
			common.PrintError(err)
			return
		}

		err = os.MkdirAll("./docs", os.ModePerm)
		if er != nil {
			common.PrintError(err)
			return
		}
	}

	// if err := doc.GenMarkdownTree(cmd, "./docs"); err != nil {
	// 	common.PrintError(err)
	// }

	if err := generateDocs(cmd, "./docs"); err != nil {
		common.PrintError(err)
	}
}

